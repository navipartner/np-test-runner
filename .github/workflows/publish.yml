name: Publish to VSCode Marketplace

on:
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Version increment type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: windows-latest
    
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Update version using semver
        id: semver
        run: |
          npm install -g semver
          $currentVersion = (Get-Content -Raw -Path package.json | ConvertFrom-Json).version
          $isBranchMain = "${{ github.ref }}" -eq "refs/heads/main"
          
          # Remove any existing prerelease suffix
          $baseVersion = $currentVersion -replace '-.*$', ''
          
          $newVersion = ""
          if ("${{ github.event.inputs.version_increment }}" -eq "patch") {
            $newVersion = $(semver -i patch $baseVersion)
          } elseif ("${{ github.event.inputs.version_increment }}" -eq "minor") {
            $newVersion = $(semver -i minor $baseVersion)
          } elseif ("${{ github.event.inputs.version_increment }}" -eq "major") {
            $newVersion = $(semver -i major $baseVersion)
          }

          $packageVersion = $newVersion
          
          $isPrerelease = !$isBranchMain
          $prerelease = $isPrerelease ? "beta" : ""
          
          if ($isPrerelease) {
            $newVersion = "$newVersion-$prerelease"
          }
          
          $package = Get-Content -Raw -Path package.json | ConvertFrom-Json
          $package.version = $packageVersion
          $package | ConvertTo-Json -Depth 100 | Set-Content package.json
          
          echo "::set-output name=base_version::$packageVersion"
          echo "::set-output name=new_version::$newVersion"
          echo "::set-output name=is_prerelease::$($isPrerelease ? 'true' : 'false')"
        shell: pwsh

      - name: Commit version update
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add package.json
          git commit -m "Bump version to ${{ steps.semver.outputs.base_version }}"
          git push
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build and publish .NET project
        run: |
          dotnet build dotnet\al-test-runner-dotnet\al-test-runner-dotnet.sln
          dotnet publish dotnet\al-test-runner-dotnet\al-test-runner-webapi\al-test-runner-webapi.csproj -c Release -o .bin\al-test-runner-webapi

      - name: npm install and compile
        run: |
          npm install
          npm run compile

      - name: package with vsce
        run: |
          npm install -g vsce
          if ("${{ steps.semver.outputs.is_prerelease }}" -eq "true") {
            vsce package --pre-release
          } else {
            vsce package
          }
        shell: pwsh

      - name: Create Git tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ steps.semver.outputs.base_version }}',
              sha: context.sha
            })
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          name: NP-AL-Test-Runner-v${{ steps.semver.outputs.base_version }}
          path: ./*.vsix

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.semver.outputs.base_version }}
          name: Release v${{ steps.semver.outputs.new_version }}
          draft: false
          prerelease: ${{ steps.semver.outputs.is_prerelease == 'true' }}
          files: ./*.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to VSCode Marketplace
        run: |
          if ("${{ steps.semver.outputs.is_prerelease }}" -eq "true") {
            vsce publish --pre-release -p ${{ secrets.VSCE_PAT }}
          } else {
            vsce publish -p ${{ secrets.VSCE_PAT }}
          }
        shell: pwsh